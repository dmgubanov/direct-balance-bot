import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TELEGRAM_BOT_TOKEN = '7269963709:AAFdkvZgawkyJ3zR3Jgxo9DFRb1fxU1KyJ8'

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
ALLOWED_USER_ID = 294261815  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à user_id

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_LOGIN, ADD_NAME, ADD_TOKEN = range(3)
DELETE_ACCOUNT = range(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
async def check_access(update: Update, context: CallbackContext):
    if update.message.from_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return False
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ config.txt
def load_config(filename):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ config.txt.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ª–æ–≥–∏–Ω, —Ç–æ–∫–µ–Ω, –∏–º—è).
    """
    accounts = []
    with open(filename, 'r', encoding='utf-8') as file:
        for line in file:
            line = line.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
            if line and not line.startswith('['):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–µ–∫—Ü–∏–∏
                try:
                    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
                    login, token_and_name = map(str.strip, line.split(':', 1))
                    token, name = map(str.strip, token_and_name.split(',', 1))
                    accounts.append((login, token, name))
                except ValueError:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
    return accounts

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª config.txt
def save_config(filename, accounts):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª config.txt.
    """
    with open(filename, 'w', encoding='utf-8') as file:
        file.write("[Accounts]\n")
        for login, token, name in accounts:
            file.write(f"{login}: {token}, {name}\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def get_balance(login, token, name):
    url = 'https://api.direct.yandex.ru/live/v4/json/'
    data = {
        "method": "AccountManagement",
        "param": {
            "Action": "Get",
            "Logins": [login],
        },
        "token": token
    }
    response = requests.post(url, json=data)
    response_json = response.json()['data']['Accounts'][0]
    return f'{name} ({response_json["Login"]})\nBalance: {response_json["Amount"]} rub.'

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    print(f"User ID: {user_id}")  # –í—ã–≤–æ–¥–∏–º user_id –≤ –∫–æ–Ω—Å–æ–ª—å
    await update.message.reply_text(f"–í–∞—à user_id: {user_id}")

    if not await check_access(update, context):
        return

    keyboard = [['–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã'], ['–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'], ['–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã"
async def get_balances(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ config.txt
    accounts = load_config('config.txt')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    header = f"–ù–∞ {current_time} –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö:\n\n"

    balances = []
    for login, token, name in accounts:
        try:
            balance_info = get_balance(login, token, name)
            balances.append(balance_info)
        except Exception as e:
            balances.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {login}: {str(e)}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –±–∞–ª–∞–Ω—Å–∞–º
    result_message = header + "\n-------------------------\n".join(balances)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(result_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def add_account_start(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_LOGIN

# –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
async def add_account_login(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return ConversationHandler.END

    context.user_data['login'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞:")
    return ADD_NAME

# –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
async def add_account_name(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return ConversationHandler.END

    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω:")
    return ADD_TOKEN

# –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
async def add_account_token(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return ConversationHandler.END

    context.user_data['token'] = update.message.text

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = load_config('config.txt')

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    accounts.append((context.user_data['login'], context.user_data['token'], context.user_data['name']))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    save_config('config.txt', accounts)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = [['–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã'], ['–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'], ['–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=reply_markup)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def delete_account_start(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=ReplyKeyboardRemove()
    )
    return DELETE_ACCOUNT

# –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
async def delete_account(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return ConversationHandler.END

    login_to_delete = update.message.text

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = load_config('config.txt')

    # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    found_accounts = [acc for acc in accounts if acc[0] == login_to_delete]

    if found_accounts:
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        accounts = [acc for acc in accounts if acc[0] != login_to_delete]
        save_config('config.txt', accounts)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [['–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã'], ['–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'], ['–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–ê–∫–∫–∞—É–Ω—Ç {login_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=reply_markup)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [['–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã'], ['–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'], ['–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–ê–∫–∫–∞—É–Ω—Ç —Å –ª–æ–≥–∏–Ω–æ–º {login_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_markup)

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
async def cancel(update: Update, context: CallbackContext):
    if not await check_access(update, context):
        return ConversationHandler.END

    keyboard = [['–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã'], ['–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'], ['–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    application.add_handler(MessageHandler(filters.Text("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã"), get_balances))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    add_account_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"), add_account_start)],
        states={
            ADD_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_account_login)],
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_account_name)],
            ADD_TOKEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_account_token)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(add_account_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    delete_account_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"), delete_account_start)],
        states={
            DELETE_ACCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_account)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(delete_account_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()